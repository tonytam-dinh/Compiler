
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightASSIGNleftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEMODULUSrightEXPONENTIATIONrightUMINUSUPLUSleftFACTORIALAND ASSIGN BREAK BY COMMA CONTINUE DIVIDE DO ELIF ELSE END EQ EXPONENTIATION FACTORIAL FOR GE GT ID IF INT INT_LITERAL LBRACE LE LPAREN LT MINUS MODULUS MULTIPLY NE OR PLUS RBRACE READ REAL REAL_LITERAL RPAREN SEMICOLON STRING_LITERAL THEN TO WHILE WRITEprogram : blockblock : LBRACE statement_list semicolon_opt RBRACEsemicolon_opt : epsilon\n                   | SEMICOLONstatement : BREAKstatement : CONTINUEstatement : type identifier init_opttype : INT\n          | REALinit_opt : epsilon\n              | ASSIGN expressionstatement : expressionstatement : FOR identifier ASSIGN expression TO expression step_opt DO statement_list semicolon_opt END FORstep_opt : epsilon\n              | BY expressionstatement : IF expression THEN statement_list semicolon_opt elif_opt else_opt END IFelif_opt : epsilon\n              | elif_opt ELIF expression THEN statement_list semicolon_optelse_opt : epsilon\n              | ELSE statement_list semicolon_optstatement : READ LPAREN id_list RPARENid_list : id_list COMMA identifier\n             | identifierstatement : WHILE expression DO statement_list semicolon_opt END WHILEstatement : WRITE LPAREN expression_list_opt RPARENexpression_list_opt : epsilon\n                         | expression_listexpression_list : expression_list COMMA expressionexpression_list : expressionstatement_list : statement_list SEMICOLON statementstatement_list : statementidentifier : IDexpression : expression PLUS     expression\n                | expression MINUS    expression\n                | expression MULTIPLY expression\n                | expression DIVIDE   expression\n                | expression MODULUS  expression\n                | expression EXPONENTIATION expression\n                | expression EQ       expression\n                | expression NE       expression\n                | expression LT       expression\n                | expression LE       expression\n                | expression GT       expression\n                | expression GE       expression\n                | expression AND      expression\n                | expression OR       expression\n                | identifier ASSIGN   expressionexpression : expression FACTORIAL\n                | MINUS expression %prec UMINUS\n                | PLUS  expression %prec UPLUSexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : REAL_LITERALexpression : STRING_LITERALexpression : identifierepsilon :'
    
_lr_action_items = {'LBRACE':([0,],[3,]),'$end':([1,2,53,],[0,-1,-2,]),'BREAK':([3,26,74,78,106,108,115,],[6,6,6,6,6,6,6,]),'CONTINUE':([3,26,74,78,106,108,115,],[7,7,7,7,7,7,7,]),'FOR':([3,26,74,78,106,108,115,119,],[11,11,11,11,11,11,11,121,]),'IF':([3,26,74,78,106,108,110,115,],[12,12,12,12,12,12,114,12,]),'READ':([3,26,74,78,106,108,115,],[13,13,13,13,13,13,13,]),'WHILE':([3,26,74,78,99,106,108,115,],[15,15,15,15,107,15,15,15,]),'WRITE':([3,26,74,78,106,108,115,],[16,16,16,16,16,16,16,]),'INT':([3,26,74,78,106,108,115,],[17,17,17,17,17,17,17,]),'REAL':([3,26,74,78,106,108,115,],[18,18,18,18,18,18,18,]),'MINUS':([3,9,10,12,14,15,19,20,21,22,23,24,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,82,83,84,90,91,95,96,102,104,106,108,109,111,115,],[20,-55,31,20,20,20,20,20,-52,-53,-54,-32,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-48,31,31,31,20,-50,-49,20,31,-33,-34,-35,-36,-37,-38,31,31,31,31,31,31,31,31,20,20,-51,20,31,31,31,20,20,31,31,20,20,20,20,31,31,20,]),'PLUS':([3,9,10,12,14,15,19,20,21,22,23,24,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,82,83,84,90,91,95,96,102,104,106,108,109,111,115,],[19,-55,30,19,19,19,19,19,-52,-53,-54,-32,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-48,30,30,30,19,-50,-49,19,30,-33,-34,-35,-36,-37,-38,30,30,30,30,30,30,30,30,19,19,-51,19,30,30,30,19,19,30,30,19,19,19,19,30,30,19,]),'LPAREN':([3,12,13,14,15,16,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,57,73,74,78,90,91,102,104,106,108,115,],[14,14,47,14,14,50,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'INT_LITERAL':([3,12,14,15,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,57,73,74,78,90,91,102,104,106,108,115,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'REAL_LITERAL':([3,12,14,15,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,57,73,74,78,90,91,102,104,106,108,115,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'STRING_LITERAL':([3,12,14,15,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,57,73,74,78,90,91,102,104,106,108,115,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'ID':([3,8,11,12,14,15,17,18,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,50,57,73,74,78,87,90,91,102,104,106,108,115,],[24,24,24,24,24,24,-8,-9,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'SEMICOLON':([4,5,6,7,9,10,21,22,23,24,28,44,51,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,83,85,86,88,89,107,112,113,114,118,121,],[26,-31,-5,-6,-55,-12,-52,-53,-54,-32,-56,-48,-50,-49,-30,-7,-10,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-11,26,-21,26,-25,-24,26,26,-16,26,-13,]),'RBRACE':([4,5,6,7,9,10,21,22,23,24,25,26,27,28,44,51,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,83,86,89,107,114,121,],[-56,-31,-5,-6,-55,-12,-52,-53,-54,-32,53,-4,-3,-56,-48,-50,-49,-30,-7,-10,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-11,-21,-25,-24,-16,-13,]),'ELIF':([5,6,7,9,10,21,22,23,24,26,27,28,44,51,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,83,85,86,89,92,97,98,107,114,118,120,121,],[-31,-5,-6,-55,-12,-52,-53,-54,-32,-4,-3,-56,-48,-50,-49,-30,-7,-10,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-11,-56,-21,-25,-56,104,-17,-24,-16,-56,-18,-13,]),'ELSE':([5,6,7,9,10,21,22,23,24,26,27,28,44,51,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,83,85,86,89,92,97,98,107,114,118,120,121,],[-31,-5,-6,-55,-12,-52,-53,-54,-32,-4,-3,-56,-48,-50,-49,-30,-7,-10,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-11,-56,-21,-25,-56,106,-17,-24,-16,-56,-18,-13,]),'END':([5,6,7,9,10,21,22,23,24,26,27,28,44,51,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,83,85,86,88,89,92,94,97,98,103,105,107,112,113,114,116,117,118,120,121,],[-31,-5,-6,-55,-12,-52,-53,-54,-32,-4,-3,-56,-48,-50,-49,-30,-7,-10,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-11,-56,-21,-56,-25,-56,99,-56,-17,110,-19,-24,-56,-56,-16,-20,119,-56,-18,-13,]),'ASSIGN':([9,24,28,45,],[29,-32,57,73,]),'MULTIPLY':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,32,-52,-53,-54,-32,-48,32,32,32,-50,-49,32,32,32,-35,-36,-37,-38,32,32,32,32,32,32,32,32,-51,32,32,32,32,32,32,32,]),'DIVIDE':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,33,-52,-53,-54,-32,-48,33,33,33,-50,-49,33,33,33,-35,-36,-37,-38,33,33,33,33,33,33,33,33,-51,33,33,33,33,33,33,33,]),'MODULUS':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,34,-52,-53,-54,-32,-48,34,34,34,-50,-49,34,34,34,-35,-36,-37,-38,34,34,34,34,34,34,34,34,-51,34,34,34,34,34,34,34,]),'EXPONENTIATION':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,35,-52,-53,-54,-32,-48,35,35,35,-50,-49,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-51,35,35,35,35,35,35,35,]),'EQ':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,36,-52,-53,-54,-32,-48,36,36,36,-50,-49,36,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,36,36,-51,36,36,36,36,36,36,36,]),'NE':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,37,-52,-53,-54,-32,-48,37,37,37,-50,-49,37,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,37,37,-51,37,37,37,37,37,37,37,]),'LT':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,38,-52,-53,-54,-32,-48,38,38,38,-50,-49,38,-33,-34,-35,-36,-37,-38,38,38,-41,-42,-43,-44,38,38,-51,38,38,38,38,38,38,38,]),'LE':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,39,-52,-53,-54,-32,-48,39,39,39,-50,-49,39,-33,-34,-35,-36,-37,-38,39,39,-41,-42,-43,-44,39,39,-51,39,39,39,39,39,39,39,]),'GT':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,40,-52,-53,-54,-32,-48,40,40,40,-50,-49,40,-33,-34,-35,-36,-37,-38,40,40,-41,-42,-43,-44,40,40,-51,40,40,40,40,40,40,40,]),'GE':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,41,-52,-53,-54,-32,-48,41,41,41,-50,-49,41,-33,-34,-35,-36,-37,-38,41,41,-41,-42,-43,-44,41,41,-51,41,41,41,41,41,41,41,]),'AND':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,42,-52,-53,-54,-32,-48,42,42,42,-50,-49,42,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,42,-51,42,42,42,42,42,42,42,]),'OR':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,43,-52,-53,-54,-32,-48,43,43,43,-50,-49,43,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,43,43,43,43,43,43,43,]),'FACTORIAL':([9,10,21,22,23,24,44,46,48,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,82,83,84,95,96,109,111,],[-55,44,-52,-53,-54,-32,-48,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-51,44,44,44,44,44,44,44,]),'THEN':([9,21,22,23,24,44,46,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,111,],[-55,-52,-53,-54,-32,-48,74,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,115,]),'RPAREN':([9,21,22,23,24,44,48,50,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,79,80,81,82,93,95,],[-55,-52,-53,-54,-32,-48,77,-56,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,86,-23,-51,89,-26,-27,-29,-22,-28,]),'DO':([9,21,22,23,24,44,49,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,96,100,101,109,],[-55,-52,-53,-54,-32,-48,78,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,-56,108,-14,-15,]),'COMMA':([9,21,22,23,24,44,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,81,82,93,95,],[-55,-52,-53,-54,-32,-48,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,87,-23,-51,90,-29,-22,-28,]),'TO':([9,21,22,23,24,44,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,84,],[-55,-52,-53,-54,-32,-48,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,91,]),'BY':([9,21,22,23,24,44,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,96,],[-55,-52,-53,-54,-32,-48,-50,-49,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'statement_list':([3,74,78,106,108,115,],[4,85,88,112,113,118,]),'statement':([3,26,74,78,106,108,115,],[5,54,5,5,5,5,5,]),'type':([3,26,74,78,106,108,115,],[8,8,8,8,8,8,8,]),'identifier':([3,8,11,12,14,15,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,50,57,73,74,78,87,90,91,102,104,106,108,115,],[9,28,45,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,76,9,9,9,9,9,93,9,9,9,9,9,9,9,]),'expression':([3,12,14,15,19,20,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,57,73,74,78,90,91,102,104,106,108,115,],[10,46,48,49,51,52,10,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,82,83,84,10,10,95,96,109,111,10,10,10,]),'semicolon_opt':([4,85,88,112,113,118,],[25,92,94,116,117,120,]),'epsilon':([4,28,50,85,88,92,96,97,112,113,118,],[27,56,80,27,27,98,101,105,27,27,27,]),'init_opt':([28,],[55,]),'id_list':([47,],[75,]),'expression_list_opt':([50,],[79,]),'expression_list':([50,],[81,]),'elif_opt':([92,],[97,]),'step_opt':([96,],[100,]),'else_opt':([97,],[103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','miniFrontEnd.py',147),
  ('block -> LBRACE statement_list semicolon_opt RBRACE','block',4,'p_block','miniFrontEnd.py',151),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',155),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',156),
  ('statement -> BREAK','statement',1,'p_statement_break','miniFrontEnd.py',163),
  ('statement -> CONTINUE','statement',1,'p_statement_continue','miniFrontEnd.py',168),
  ('statement -> type identifier init_opt','statement',3,'p_statement_decl','miniFrontEnd.py',173),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',177),
  ('type -> REAL','type',1,'p_type','miniFrontEnd.py',178),
  ('init_opt -> epsilon','init_opt',1,'p_init_opt','miniFrontEnd.py',182),
  ('init_opt -> ASSIGN expression','init_opt',2,'p_init_opt','miniFrontEnd.py',183),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',192),
  ('statement -> FOR identifier ASSIGN expression TO expression step_opt DO statement_list semicolon_opt END FOR','statement',12,'p_statement_for','miniFrontEnd.py',197),
  ('step_opt -> epsilon','step_opt',1,'p_step_opt','miniFrontEnd.py',201),
  ('step_opt -> BY expression','step_opt',2,'p_step_opt','miniFrontEnd.py',202),
  ('statement -> IF expression THEN statement_list semicolon_opt elif_opt else_opt END IF','statement',9,'p_statement_if','miniFrontEnd.py',211),
  ('elif_opt -> epsilon','elif_opt',1,'p_elif_opt','miniFrontEnd.py',215),
  ('elif_opt -> elif_opt ELIF expression THEN statement_list semicolon_opt','elif_opt',6,'p_elif_opt','miniFrontEnd.py',216),
  ('else_opt -> epsilon','else_opt',1,'p_else_opt','miniFrontEnd.py',225),
  ('else_opt -> ELSE statement_list semicolon_opt','else_opt',3,'p_else_opt','miniFrontEnd.py',226),
  ('statement -> READ LPAREN id_list RPAREN','statement',4,'p_statement_read','miniFrontEnd.py',235),
  ('id_list -> id_list COMMA identifier','id_list',3,'p_id_list','miniFrontEnd.py',239),
  ('id_list -> identifier','id_list',1,'p_id_list','miniFrontEnd.py',240),
  ('statement -> WHILE expression DO statement_list semicolon_opt END WHILE','statement',7,'p_statement_while','miniFrontEnd.py',250),
  ('statement -> WRITE LPAREN expression_list_opt RPAREN','statement',4,'p_statement_write','miniFrontEnd.py',255),
  ('expression_list_opt -> epsilon','expression_list_opt',1,'p_expression_list_opt','miniFrontEnd.py',259),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','miniFrontEnd.py',260),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list_A','miniFrontEnd.py',268),
  ('expression_list -> expression','expression_list',1,'p_expression_list_B','miniFrontEnd.py',273),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_A','miniFrontEnd.py',278),
  ('statement_list -> statement','statement_list',1,'p_statement_list_B','miniFrontEnd.py',283),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',290),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',298),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',299),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','miniFrontEnd.py',300),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',301),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',302),
  ('expression -> expression EXPONENTIATION expression','expression',3,'p_expression_binop','miniFrontEnd.py',303),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','miniFrontEnd.py',304),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','miniFrontEnd.py',305),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','miniFrontEnd.py',306),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','miniFrontEnd.py',307),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','miniFrontEnd.py',308),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','miniFrontEnd.py',309),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',310),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',311),
  ('expression -> identifier ASSIGN expression','expression',3,'p_expression_binop','miniFrontEnd.py',312),
  ('expression -> expression FACTORIAL','expression',2,'p_expression_unop','miniFrontEnd.py',317),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',318),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',319),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',330),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',335),
  ('expression -> REAL_LITERAL','expression',1,'p_expression_real_literal','miniFrontEnd.py',340),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string_literal','miniFrontEnd.py',349),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',353),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',361),
]
